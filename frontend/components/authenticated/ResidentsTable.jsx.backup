'use client'

import { useState, useMemo, useEffect, useRef } from 'react'
import Spinner from '../common/Spinner'

export default function ResidentsTable({ 
  residents = [], 
  loading = false, 
  onView, 
  onEdit, 
  onDelete,
  onRefresh,
  onAdd
}) {
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage, setItemsPerPage] = useState(25)
  const [sortField, setSortField] = useState('name')
  const [sortDirection, setSortDirection] = useState('asc')
  const [searchQuery, setSearchQuery] = useState('')
  const [statusFilter, setStatusFilter] = useState('active') // Default to 'active' status
  const [openDropdown, setOpenDropdown] = useState(null)
  const [isScrolled, setIsScrolled] = useState(false)
  const [selectedResidents, setSelectedResidents] = useState(new Set())
  const [hoveredFilter, setHoveredFilter] = useState(null) // Track which filter is being hovered
  
  // Filter values for additional filters
  const [residentTypeFilter, setResidentTypeFilter] = useState('all')
  const [householdRoleFilter, setHouseholdRoleFilter] = useState('all')
  const [ageGroupFilter, setAgeGroupFilter] = useState('all')
  const [civilStatusFilter, setCivilStatusFilter] = useState('all')
  const [specialCategoryFilter, setSpecialCategoryFilter] = useState('all')
  
  // Check if any filters are active (excluding default 'active' status)
  const isAnyFilterActive = searchQuery !== '' || 
    (statusFilter !== 'all' && statusFilter !== 'active') || 
    residentTypeFilter !== 'all' ||
    householdRoleFilter !== 'all' || 
    ageGroupFilter !== 'all' || 
    civilStatusFilter !== 'all' || 
    specialCategoryFilter !== 'all'
  
  const dropdownRef = useRef(null)

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setOpenDropdown(null)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // Track scroll position for sticky header
  useEffect(() => {
    const handleScroll = (e) => {
      setIsScrolled(e.target.scrollTop > 0)
    }

    const tableContainer = document.querySelector('.table-container')
    if (tableContainer) {
      tableContainer.addEventListener('scroll', handleScroll)
      return () => tableContainer.removeEventListener('scroll', handleScroll)
    }
  }, [])

  const clearAllFilters = () => {
    setSearchQuery('')
    setStatusFilter('all')
    setResidentTypeFilter('all')
    setHouseholdRoleFilter('all')
    setAgeGroupFilter('all')
    setCivilStatusFilter('all')
    setSpecialCategoryFilter('all')
    setCurrentPage(1)
  }

  const statusOptions = [
    { value: 'all', label: 'All Status' },
    { value: 'active', label: 'Active' },
    { value: 'inactive', label: 'Inactive' }
  ]

  const residentTypeOptions = [
    { value: 'all', label: 'All Types' },
    { value: 'permanent', label: 'Permanent' },
    { value: 'temporary', label: 'Temporary' },
    { value: 'transient', label: 'Transient' }
  ]

  const householdRoleOptions = [
    { value: 'all', label: 'All Roles' },
    { value: 'head', label: 'Head' },
    { value: 'spouse', label: 'Spouse' },
    { value: 'child', label: 'Child' },
    { value: 'parent', label: 'Parent' },
    { value: 'sibling', label: 'Sibling' },
    { value: 'relative', label: 'Relative' },
    { value: 'boarder', label: 'Boarder' },
    { value: 'other', label: 'Other' }
  ]

  const ageGroupOptions = [
    { value: 'all', label: 'All Ages' },
    { value: 'child', label: 'Child (0-17)' },
    { value: 'adult', label: 'Adult (18-59)' },
    { value: 'senior', label: 'Senior (60+)' }
  ]

  const civilStatusOptions = [
    { value: 'all', label: 'All Status' },
    { value: 'single', label: 'Single' },
    { value: 'married', label: 'Married' },
    { value: 'divorced', label: 'Divorced' },
    { value: 'widowed', label: 'Widowed' },
    { value: 'separated', label: 'Separated' }
  ]

  const specialCategoryOptions = [
    { value: 'all', label: 'All Categories' },
    { value: 'pwd', label: 'PWD' },
    { value: 'senior', label: 'Senior Citizen' },
    { value: 'solo_parent', label: 'Solo Parent' },
    { value: 'indigenous', label: 'Indigenous' },
    { value: 'none', label: 'None' }
  ]

  const getAgeGroup = (birthDate) => {
    if (!birthDate) return 'unknown'
    const age = new Date().getFullYear() - new Date(birthDate).getFullYear()
    if (age < 18) return 'child'
    if (age < 60) return 'adult'
    return 'senior'
  }

  const filteredResidents = useMemo(() => {
    return residents.filter(resident => {
      // Search filter
      if (searchQuery) {
        const query = searchQuery.toLowerCase()
        const searchText = `${resident.firstName} ${resident.lastName} ${resident.middleName || ''} ${resident.address || ''} ${resident.contactNumber || ''} ${resident.email || ''}`.toLowerCase()
        if (!searchText.includes(query)) return false
      }

      // Status filter
      if (statusFilter !== 'all' && resident.status !== statusFilter) return false

      // Resident type filter
      if (residentTypeFilter !== 'all' && resident.type !== residentTypeFilter) return false

      // Household role filter
      if (householdRoleFilter !== 'all' && resident.householdRole !== householdRoleFilter) return false

      // Age group filter
      if (ageGroupFilter !== 'all') {
        const ageGroup = getAgeGroup(resident.birthDate)
        if (ageGroup !== ageGroupFilter) return false
      }

      // Civil status filter
      if (civilStatusFilter !== 'all' && resident.civilStatus !== civilStatusFilter) return false

      // Special category filter
      if (specialCategoryFilter !== 'all') {
        const category = resident.specialCategory || 'none'
        if (category !== specialCategoryFilter) return false
      }

      return true
    })
  }, [residents, searchQuery, statusFilter, residentTypeFilter, householdRoleFilter, ageGroupFilter, civilStatusFilter, specialCategoryFilter])

  const sortedResidents = useMemo(() => {
    const sorted = [...filteredResidents].sort((a, b) => {
      let aValue, bValue
      
      switch (sortField) {
        case 'name':
          aValue = `${a.lastName}, ${a.firstName}`.toLowerCase()
          bValue = `${b.lastName}, ${b.firstName}`.toLowerCase()
          break
        case 'age':
          aValue = a.birthDate ? new Date().getFullYear() - new Date(a.birthDate).getFullYear() : 0
          bValue = b.birthDate ? new Date().getFullYear() - new Date(b.birthDate).getFullYear() : 0
          break
        case 'status':
          aValue = a.status?.toLowerCase() || ''
          bValue = b.status?.toLowerCase() || ''
          break
        case 'address':
          aValue = a.address?.toLowerCase() || ''
          bValue = b.address?.toLowerCase() || ''
          break
        default:
          aValue = a[sortField]?.toString().toLowerCase() || ''
          bValue = b[sortField]?.toString().toLowerCase() || ''
      }

      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1
      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1
      return 0
    })
    
    return sorted
  }, [filteredResidents, sortField, sortDirection])

  const totalPages = Math.ceil(sortedResidents.length / itemsPerPage)
  const startIndex = (currentPage - 1) * itemsPerPage
  const endIndex = startIndex + itemsPerPage
  const currentResidents = sortedResidents.slice(startIndex, endIndex)

  const handleSort = (field) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortDirection('asc')
    }
  }

  const handleSelectAll = (checked) => {
    if (checked) {
      const allIds = new Set(currentResidents.map(r => r.id))
      setSelectedResidents(allIds)
    } else {
      setSelectedResidents(new Set())
    }
  }

  const handleSelectResident = (id, checked) => {
    const newSelected = new Set(selectedResidents)
    if (checked) {
      newSelected.add(id)
    } else {
      newSelected.delete(id)
    }
    setSelectedResidents(newSelected)
  }

  const formatAge = (birthDate) => {
    if (!birthDate) return 'N/A'
    const age = new Date().getFullYear() - new Date(birthDate).getFullYear()
    return `${age} years old`
  }

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A'
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }

  const SortIcon = ({ field }) => {
    if (sortField !== field) {
      return <span className="text-gray-400">↕</span>
    }
    return (
      <span className="text-blue-600">
        {sortDirection === 'asc' ? '↑' : '↓'}
      </span>
    )
  }

  const FilterDropdown = ({ value, onChange, options, placeholder, isOpen, onToggle }) => (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={onToggle}
        onMouseEnter={() => setHoveredFilter(placeholder)}
        onMouseLeave={() => setHoveredFilter(null)}
        className={`w-full h-8 px-3 text-xs font-medium text-left border rounded-md transition-colors antialiased tracking-normal ${
          hoveredFilter === placeholder 
            ? 'bg-gray-50 border-gray-300' 
            : 'bg-white border-gray-200'
        } hover:border-gray-300 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500`}
      >
        <div className="flex items-center justify-between">
          <span className="truncate">
            {options.find(opt => opt.value === value)?.label || placeholder}
          </span>
          <svg className="w-3 h-3 ml-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </div>
      </button>
      
      {isOpen && (
        <div className="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-auto">
          {options.map((option) => (
            <button
              key={option.value}
              onClick={() => {
                onChange(option.value)
                setOpenDropdown(null)
              }}
              className="w-full px-3 py-1.5 text-xs text-left hover:bg-gray-50 focus:bg-gray-50 focus:outline-none antialiased font-medium tracking-normal"
            >
              {option.label}
            </button>
          ))}
        </div>
      )}
    </div>
  )

  const FilterTag = ({ label, onRemove, value, options }) => {
    const option = options.find(opt => opt.value === value)
    if (!option || value === 'all') return null
    
    return (
      <div className="inline-flex items-center gap-1 px-2 py-1 bg-blue-50 text-blue-700 rounded text-xs font-medium antialiased tracking-normal">
        <span>{label}: {option.label}</span>
        <button
          onClick={onRemove}
          onMouseEnter={() => setHoveredFilter(`remove-${label}`)}
          onMouseLeave={() => setHoveredFilter(null)}
          className={`flex items-center justify-center w-3 h-3 transition-colors ${
            hoveredFilter === `remove-${label}`
              ? 'bg-white border border-gray-200 rounded' 
              : ''
          }`}
        >
          <svg 
            className="w-2.5 h-2.5" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
            strokeWidth={hoveredFilter === `remove-${label}` ? 2 : 1.5}
          >
            <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    )
  }

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        {/* Header with filters */}
        <div className="p-4 border-b border-gray-200 space-y-3">
          {/* Top row with search, Add Resident and Refresh buttons */}
          <div className="flex flex-col sm:flex-row gap-3 sm:items-center sm:justify-between">
            <div className="flex-1 max-w-md">
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg className="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
                <input
                  type="text"
                  placeholder="Search residents..."
                  disabled
                  className="w-full h-8 pl-10 pr-3 text-sm border border-gray-200 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-50 antialiased font-medium tracking-normal"
                />
              </div>
            </div>
            
            <div className="flex gap-2">
              <button
                disabled
                className="inline-flex items-center justify-center px-3 h-8 text-sm font-medium rounded-md border bg-blue-600 border-blue-600 text-white opacity-50 cursor-not-allowed antialiased tracking-normal"
              >
                <svg className="w-3 h-3 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
                Add Resident
              </button>
              
              <button
                disabled
                className="inline-flex items-center justify-center px-3 h-8 text-sm font-medium rounded-md border bg-white border-gray-300 text-gray-700 opacity-50 cursor-not-allowed antialiased tracking-normal"
              >
                <svg className="w-3 h-3 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Refresh
              </button>
            </div>
          </div>
          
          {/* Filter dropdowns row */}
          <div className="flex flex-wrap gap-2">
            <div className="w-24">
              <div className="w-full h-8 bg-gray-100 rounded-md animate-pulse"></div>
            </div>
            <div className="w-28">
              <div className="w-full h-8 bg-gray-100 rounded-md animate-pulse"></div>
            </div>
            <div className="w-28">
              <div className="w-full h-8 bg-gray-100 rounded-md animate-pulse"></div>
            </div>
            <div className="w-24">
              <div className="w-full h-8 bg-gray-100 rounded-md animate-pulse"></div>
            </div>
            <div className="w-32">
              <div className="w-full h-8 bg-gray-100 rounded-md animate-pulse"></div>
            </div>
          </div>
        </div>

        {/* Table skeleton */}
        <div className="overflow-hidden">
          <div className="table-container overflow-auto min-h-[calc(100vh-280px)] max-h-[calc(100vh-280px)]">
            <table className="w-full">
              <thead className="bg-gray-100 sticky top-0 z-10">
                <tr>
                  <th className="w-12 px-3 py-2">
                    <div className="w-4 h-4 bg-gray-200 rounded animate-pulse"></div>
                  </th>
                  <th className="px-3 py-2 text-left">
                    <div className="w-20 h-4 bg-gray-200 rounded animate-pulse"></div>
                  </th>
                  <th className="px-3 py-2 text-left">
                    <div className="w-16 h-4 bg-gray-200 rounded animate-pulse"></div>
                  </th>
                  <th className="px-3 py-2 text-left">
                    <div className="w-24 h-4 bg-gray-200 rounded animate-pulse"></div>
                  </th>
                  <th className="px-3 py-2 text-left">
                    <div className="w-20 h-4 bg-gray-200 rounded animate-pulse"></div>
                  </th>
                  <th className="px-3 py-2 text-left">
                    <div className="w-16 h-4 bg-gray-200 rounded animate-pulse"></div>
                  </th>
                  <th className="px-3 py-2 text-left">
                    <div className="w-20 h-4 bg-gray-200 rounded animate-pulse"></div>
                  </th>
                  <th className="w-24 px-3 py-2">
                    <div className="w-16 h-4 bg-gray-200 rounded animate-pulse"></div>
                  </th>
                </tr>
              </thead>
              <tbody>
                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((i) => (
                  <tr key={i} className="border-b border-gray-100 hover:bg-gray-50">
                    <td className="w-12 px-3 py-1">
                      <div className="flex items-center justify-center">
                        <div className="w-4 h-4 bg-gray-200 rounded animate-pulse"></div>
                      </div>
                    </td>
                    <td className="px-3 py-1 whitespace-nowrap">
                      <div className="space-y-1">
                        <div className="w-32 h-3 bg-gray-200 rounded animate-pulse"></div>
                        <div className="w-16 h-2 bg-gray-100 rounded animate-pulse"></div>
                      </div>
                    </td>
                    <td className="px-3 py-1">
                      <div className="w-12 h-3 bg-gray-200 rounded animate-pulse"></div>
                    </td>
                    <td className="px-3 py-1">
                      <div className="w-20 h-3 bg-gray-200 rounded animate-pulse"></div>
                    </td>
                    <td className="px-3 py-1">
                      <div className="w-24 h-3 bg-gray-200 rounded animate-pulse"></div>
                    </td>
                    <td className="px-3 py-1">
                      <div className="w-16 h-6 bg-gray-200 rounded animate-pulse"></div>
                    </td>
                    <td className="px-3 py-1">
                      <div className="w-20 h-3 bg-gray-200 rounded animate-pulse"></div>
                    </td>
                    <td className="w-24 px-3 py-1">
                      <div className="flex gap-1">
                        <div className="w-6 h-6 bg-gray-200 rounded animate-pulse"></div>
                        <div className="w-6 h-6 bg-gray-200 rounded animate-pulse"></div>
                        <div className="w-6 h-6 bg-gray-200 rounded animate-pulse"></div>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Pagination skeleton */}
        <div className="px-4 py-3 border-t border-gray-200 bg-white">
          <div className="flex items-center justify-between">
            <div className="w-32 h-4 bg-gray-200 rounded animate-pulse"></div>
            <div className="flex gap-2">
              <div className="w-20 h-8 bg-gray-200 rounded animate-pulse"></div>
              <div className="w-8 h-8 bg-gray-200 rounded animate-pulse"></div>
              <div className="w-8 h-8 bg-gray-200 rounded animate-pulse"></div>
              <div className="w-20 h-8 bg-gray-200 rounded animate-pulse"></div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200">
      {/* Header with filters */}
      <div className="p-4 border-b border-gray-200 space-y-3">
        {/* Top row with search, Add Resident and Refresh buttons */}
        <div className="flex flex-col sm:flex-row gap-3 sm:items-center sm:justify-between">
          <div className="flex-1 max-w-md">
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg className="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              <input
                type="text"
                placeholder="Search residents..."
                value={searchQuery}
                onChange={(e) => {
                  setSearchQuery(e.target.value)
                  setCurrentPage(1)
                }}
                className="w-full h-8 pl-10 pr-3 text-sm border border-gray-200 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 antialiased font-medium tracking-normal"
              />
            </div>
          </div>
          
          <div className="flex gap-2">
            <button
              onClick={onAdd}
              className="inline-flex items-center justify-center px-3 h-8 text-sm font-medium rounded-md border bg-blue-600 border-blue-600 text-white hover:bg-blue-700 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors antialiased tracking-normal"
            >
              <svg className="w-3 h-3 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
              </svg>
              Add Resident
            </button>
            
            <button
              onClick={onRefresh}
              className="inline-flex items-center justify-center px-3 h-8 text-sm font-medium rounded-md border bg-white border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors antialiased tracking-normal"
            >
              <svg className="w-3 h-3 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Refresh
            </button>
          </div>
        </div>
        
        {/* Filter dropdowns row */}
        <div className="flex flex-wrap gap-2 items-center">
          <FilterDropdown
            value={statusFilter}
            onChange={setStatusFilter}
            options={statusOptions}
            placeholder="Status"
            isOpen={openDropdown === 'status'}
            onToggle={() => setOpenDropdown(openDropdown === 'status' ? null : 'status')}
          />

          <FilterDropdown
            value={residentTypeFilter}
            onChange={setResidentTypeFilter}
            options={residentTypeOptions}
            placeholder="Type"
            isOpen={openDropdown === 'type'}
            onToggle={() => setOpenDropdown(openDropdown === 'type' ? null : 'type')}
          />
          
          <FilterDropdown
            value={householdRoleFilter}
            onChange={setHouseholdRoleFilter}
            options={householdRoleOptions}
            placeholder="Household Role"
            isOpen={openDropdown === 'household'}
            onToggle={() => setOpenDropdown(openDropdown === 'household' ? null : 'household')}
          />
          
          <FilterDropdown
            value={ageGroupFilter}
            onChange={setAgeGroupFilter}
            options={ageGroupOptions}
            placeholder="Age Group"
            isOpen={openDropdown === 'age'}
            onToggle={() => setOpenDropdown(openDropdown === 'age' ? null : 'age')}
          />
          
          <FilterDropdown
            value={civilStatusFilter}
            onChange={setCivilStatusFilter}
            options={civilStatusOptions}
            placeholder="Civil Status"
            isOpen={openDropdown === 'civil'}
            onToggle={() => setOpenDropdown(openDropdown === 'civil' ? null : 'civil')}
          />
          
          <FilterDropdown
            value={specialCategoryFilter}
            onChange={setSpecialCategoryFilter}
            options={specialCategoryOptions}
            placeholder="Special Category"
            isOpen={openDropdown === 'special'}
            onToggle={() => setOpenDropdown(openDropdown === 'special' ? null : 'special')}
          />
          
          {/* Reset Filters button positioned at the right end */}
          {isAnyFilterActive && (
            <div className="ml-auto">
              <button
                onClick={clearAllFilters}
                className="inline-flex items-center justify-center px-3 h-8 text-sm font-medium rounded-md bg-white text-gray-700 hover:bg-gray-50 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors antialiased tracking-normal"
              >
                <svg className="w-3 h-3 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
                Reset Filters
              </button>
            </div>
          )}
        </div>

        {/* Active filters display */}
        {(searchQuery || isAnyFilterActive) && (
          <div className="flex flex-wrap gap-2 pt-2">
            {searchQuery && (
              <div className="inline-flex items-center gap-1 px-2 py-1 bg-blue-50 text-blue-700 rounded text-xs font-medium antialiased tracking-normal">
                <span>Search: "{searchQuery}"</span>
                <button
                  onClick={() => {
                    setSearchQuery('')
                    setCurrentPage(1)
                  }}
                  onMouseEnter={() => setHoveredFilter('remove-search')}
                  onMouseLeave={() => setHoveredFilter(null)}
                  className={`flex items-center justify-center w-3 h-3 transition-colors ${
                    hoveredFilter === 'remove-search'
                      ? 'bg-white border border-gray-200 rounded' 
                      : ''
                  }`}
                >
                  <svg 
                    className="w-2.5 h-2.5" 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                    strokeWidth={hoveredFilter === 'remove-search' ? 2 : 1.5}
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            )}
            
            <FilterTag
              label="Status"
              value={statusFilter}
              options={statusOptions}
              onRemove={() => setStatusFilter('all')}
            />
            
            <FilterTag
              label="Type"
              value={residentTypeFilter}
              options={residentTypeOptions}
              onRemove={() => setResidentTypeFilter('all')}
            />
            
            <FilterTag
              label="Role"
              value={householdRoleFilter}
              options={householdRoleOptions}
              onRemove={() => setHouseholdRoleFilter('all')}
            />
            
            <FilterTag
              label="Age"
              value={ageGroupFilter}
              options={ageGroupOptions}
              onRemove={() => setAgeGroupFilter('all')}
            />
            
            <FilterTag
              label="Civil Status"
              value={civilStatusFilter}
              options={civilStatusOptions}
              onRemove={() => setCivilStatusFilter('all')}
            />
            
            <FilterTag
              label="Category"
              value={specialCategoryFilter}
              options={specialCategoryOptions}
              onRemove={() => setSpecialCategoryFilter('all')}
            />
          </div>
        )}
      </div>

      {/* Table container with scroll */}
      <div className="overflow-hidden">
        <div className="table-container overflow-auto min-h-[calc(100vh-280px)] max-h-[calc(100vh-280px)]">
          <table className="w-full">
            <thead className={`bg-gray-200 sticky top-0 z-10 ${isScrolled ? 'shadow-sm' : ''}`}>
              <tr>
                <th className="w-12 px-3 py-2">
                  <input
                    type="checkbox"
                    checked={currentResidents.length > 0 && currentResidents.every(r => selectedResidents.has(r.id))}
                    onChange={(e) => handleSelectAll(e.target.checked)}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                </th>
                <th 
                  className="px-3 py-2 text-left text-sm font-semibold text-gray-700 cursor-pointer hover:bg-gray-300 transition-colors antialiased tracking-normal"
                  onClick={() => handleSort('name')}
                >
                  <div className="flex items-center gap-1">
                    Name <SortIcon field="name" />
                  </div>
                </th>
                <th 
                  className="px-3 py-2 text-left text-sm font-semibold text-gray-700 cursor-pointer hover:bg-gray-300 transition-colors antialiased tracking-normal"
                  onClick={() => handleSort('age')}
                >
                  <div className="flex items-center gap-1">
                    Age <SortIcon field="age" />
                  </div>
                </th>
                <th 
                  className="px-3 py-2 text-left text-sm font-semibold text-gray-700 cursor-pointer hover:bg-gray-300 transition-colors antialiased tracking-normal"
                  onClick={() => handleSort('address')}
                >
                  <div className="flex items-center gap-1">
                    Address <SortIcon field="address" />
                  </div>
                </th>
                <th 
                  className="px-3 py-2 text-left text-sm font-semibold text-gray-700 cursor-pointer hover:bg-gray-300 transition-colors antialiased tracking-normal"
                  onClick={() => handleSort('householdRole')}
                >
                  <div className="flex items-center gap-1">
                    Role <SortIcon field="householdRole" />
                  </div>
                </th>
                <th 
                  className="px-3 py-2 text-left text-sm font-semibold text-gray-700 cursor-pointer hover:bg-gray-300 transition-colors antialiased tracking-normal"
                  onClick={() => handleSort('status')}
                >
                  <div className="flex items-center gap-1">
                    Status <SortIcon field="status" />
                  </div>
                </th>
                <th className="px-3 py-2 text-left text-sm font-semibold text-gray-700 antialiased tracking-normal">Contact</th>
                <th className="w-24 px-3 py-2 text-center text-sm font-semibold text-gray-700 antialiased tracking-normal">Actions</th>
              </tr>
            </thead>
            <tbody>
              {currentResidents.length === 0 ? (
                <tr>
                  <td colSpan="8" className="px-3 py-8 text-center text-gray-500 antialiased font-medium tracking-normal">
                    {filteredResidents.length === 0 ? 'No residents found' : 'No residents on this page'}
                  </td>
                </tr>
              ) : (
                currentResidents.map((resident) => (
                  <tr key={resident.id} className="border-b border-gray-100 hover:bg-gray-50 transition-colors">
                    <td className="w-12 px-3 py-1">
                      <div className="flex items-center justify-center">
                        <input
                          type="checkbox"
                          checked={selectedResidents.has(resident.id)}
                          onChange={(e) => handleSelectResident(resident.id, e.target.checked)}
                          className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                        />
                      </div>
                    </td>
                    <td className="px-3 py-1 whitespace-nowrap">
                      <div className="space-y-0.5">
                        <div className="text-sm font-medium text-gray-900 antialiased tracking-normal">
                          {resident.lastName}, {resident.firstName} {resident.middleName || ''}
                        </div>
                        <div className="text-xs text-gray-500 antialiased tracking-normal">
                          ID: {resident.id}
                        </div>
                      </div>
                    </td>
                    <td className="px-3 py-1 text-sm text-gray-900 antialiased font-medium tracking-normal">
                      {formatAge(resident.birthDate)}
                    </td>
                    <td className="px-3 py-1 text-sm text-gray-900 antialiased font-medium tracking-normal">
                      {resident.address || 'N/A'}
                    </td>
                    <td className="px-3 py-1 text-sm text-gray-900 antialiased font-medium tracking-normal">
                      {resident.householdRole || 'N/A'}
                    </td>
                    <td className="px-3 py-1">
                      <span className={`inline-block px-2 py-1 text-xs font-medium rounded-full antialiased tracking-normal ${
                        resident.status === 'active' 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {resident.status || 'N/A'}
                      </span>
                    </td>
                    <td className="px-3 py-1 text-sm text-gray-900 antialiased font-medium tracking-normal">
                      {resident.contactNumber || resident.email || 'N/A'}
                    </td>
                    <td className="w-24 px-3 py-1">
                      <div className="flex items-center gap-1">
                        <button
                          onClick={() => onView?.(resident)}
                          className="p-1 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded transition-colors"
                          title="View Details"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                          </svg>
                        </button>
                        <button
                          onClick={() => onEdit?.(resident)}
                          className="p-1 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded transition-colors"
                          title="Edit"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                          </svg>
                        </button>
                        <button
                          onClick={() => onDelete?.(resident)}
                          className="p-1 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded transition-colors"
                          title="Delete"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                          </svg>
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Pagination */}
      <div className="px-4 py-3 border-t border-gray-200 bg-white">
        <div className="flex items-center justify-between">
          <div className="text-sm text-gray-700 antialiased font-medium tracking-normal">
            Showing {Math.min(startIndex + 1, sortedResidents.length)} to {Math.min(endIndex, sortedResidents.length)} of {sortedResidents.length} results
          </div>
          
          <div className="flex items-center gap-2">
            <select
              value={itemsPerPage}
              onChange={(e) => {
                setItemsPerPage(Number(e.target.value))
                setCurrentPage(1)
              }}
              className="h-8 px-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 antialiased font-medium tracking-normal"
            >
              <option value={10}>10 per page</option>
              <option value={25}>25 per page</option>
              <option value={50}>50 per page</option>
              <option value={100}>100 per page</option>
            </select>
            
            <button
              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
              disabled={currentPage === 1}
              className="h-8 px-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:bg-gray-100 disabled:text-gray-400 disabled:cursor-not-allowed antialiased tracking-normal"
            >
              Previous
            </button>
            
            <span className="h-8 px-3 py-1 text-sm text-gray-700 bg-gray-50 border border-gray-300 rounded-md antialiased font-medium tracking-normal">
              {currentPage} of {totalPages || 1}
            </span>
            
            <button
              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
              disabled={currentPage >= totalPages}
              className="h-8 px-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:bg-gray-100 disabled:text-gray-400 disabled:cursor-not-allowed antialiased tracking-normal"
            >
              Next
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}
